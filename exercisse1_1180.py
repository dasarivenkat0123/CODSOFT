# -*- coding: utf-8 -*-
"""Exercisse1-1180.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JUpQDp3P-AZkxzgwxMgtKwrfTuQNmf88
"""

import math
import matplotlib.pyplot as plt
import numpy as np

def solve_quadratic(a, b, c):
    """Solve the quadratic equation ax^2 + bx + c = 0 and plot the graph."""
    if a == 0:
        print("Coefficient 'a' cannot be zero (not a quadratic equation).")
        return

    discriminant = b**2 - 4 * a * c
    if discriminant > 0:
        root1 = (-b + math.sqrt(discriminant)) / (2 * a)
        root2 = (-b - math.sqrt(discriminant)) / (2 * a)
        print(f"Two solutions: {root1:.2f} and {root2:.2f}")
    elif discriminant == 0:
        root1 = -b / (2 * a)
        print(f"One solution: {root1:.2f}")
    else:
        print("No real solutions (discriminant < 0).")

    # Plot the quadratic equation
    plot_quadratic(a, b, c)


def plot_quadratic(a, b, c):
    """Plot the quadratic equation y = ax^2 + bx + c."""
    x = np.linspace(-10, 10, 400)
    y = a * x**2 + b * x + c

    plt.plot(x, y, label=f'{a}xÂ² + {b}x + {c}')
    plt.axhline(0, color='black', linewidth=1)
    plt.axvline(0, color='black', linewidth=1)
    plt.title('Quadratic Equation Graph')
    plt.xlabel('x')
    plt.ylabel('y')
    plt.grid(True)
    plt.legend()
    plt.show()


def hardcoded_solution():
    """Solve quadratic equation with hardcoded values."""
    print("\n--- Hardcoded Solution ---")
    a, b, c = 1, -3, 2  # Example hardcoded coefficients
    print(f"Solving for: a={a}, b={b}, c={c}")
    solve_quadratic(a, b, c)


def keyboard_input_solution():
    """Solve quadratic equation with keyboard input."""
    print("\n--- Keyboard Input Solution ---")
    try:
        a = float(input("Enter coefficient a: "))
        b = float(input("Enter coefficient b: "))
        c = float(input("Enter coefficient c: "))
        solve_quadratic(a, b, c)
    except ValueError:
        print("Invalid input. Please enter numerical values.")


def file_input_solution(single_input=True):
    """Solve quadratic equation by reading coefficients from a file."""
    print("\n--- File Input Solution ---")
    file_name = input("weather_data.txt ")

    try:
        with open(file_name, "r") as file:
            if single_input:
                line = file.readline().strip()
                a, b, c = map(float, line.split(","))
                print(f"Solving for: a={a}, b={b}, c={c}")
                solve_quadratic(a, b, c)
            else:
                for line in file:
                    try:
                        a, b, c = map(float, line.strip().split(","))
                        print(f"\nSolving for: a={a}, b={b}, c={c}")
                        solve_quadratic(a, b, c)
                    except ValueError:
                        print(f"Invalid line format: {line.strip()}")
    except FileNotFoundError:
        print("File not found. Please ensure the file exists.")
    except ValueError:
        print("Invalid file format. Ensure coefficients are separated by commas.")


def main():
    """Main function to provide options for solving quadratic equations."""
    while True:
        print("\n--- Weather Modeling using Quadratic Equation ---")
        print("1. Solve with hardcoded values")
        print("2. Solve with keyboard input")
        print("3. Solve with file input (single set of inputs)")
        print("4. Solve with file input (multiple sets of inputs)")
        print("5. Exit")

        choice = input("Enter your choice (1-5): ")

        if choice == "1":
            hardcoded_solution()
        elif choice == "2":
            keyboard_input_solution()
        elif choice == "3":
            file_input_solution(single_input=True)
        elif choice == "4":
            file_input_solution(single_input=False)
        elif choice == "5":
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please select a valid option.")


if __name__ == "__main__":
    main()